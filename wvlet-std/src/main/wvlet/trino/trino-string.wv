/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

extend String(context trino:Trino):
  def toInt: Expr[Int] = q"cast(${this} as bigint)"
  def toFloat: Expr[Float] = q"cast(${this} as real)"
  def toDouble: Expr[Double] = q"cast(${this} as double)"
  def toBoolean: Expr[Boolean] = q"cast(${this} as boolean)"

  def trim: Expr[String] = q"trim(${this])"
  def split(separator: String): Expr[List[String]] = q"split(${this}, '${separator}')"
  def substring(start: Int): Expr[String] = q"substring(${this}, ${start})"
  def substring(start: Int, end:Int): Expr[String] = q"substring(${this}, ${start}, ${end})"
  def regexpContains(pattern: String): Expr[Boolean] = q"regexp_like(${this}, '${pattern}')"

  // Trino-specific functions
  def regexp_count(pattern: String): Expr[Int]n = q"regexp_count(${this}, '${pattern}')"
  def regexp_extract_alll(pattern: String): Expr[List[String]] = q"regexp_extract_all(${this}, '${pattern}')"
end
